// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Services.Models;

namespace Services.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231117050649_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Services.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Services.Models.Blood", b =>
                {
                    b.Property<int>("bloodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bloodName");

                    b.Property<DateTime>("create_at");

                    b.Property<DateTime>("update_at");

                    b.HasKey("bloodId");

                    b.HasIndex("bloodName")
                        .IsUnique()
                        .HasFilter("[bloodName] IS NOT NULL");

                    b.ToTable("Blood");
                });

            modelBuilder.Entity("Services.Models.BloodBank", b =>
                {
                    b.Property<int>("bbId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address");

                    b.Property<string>("bbName");

                    b.Property<string>("calendar");

                    b.Property<DateTime>("create_at");

                    b.Property<int>("districtId");

                    b.Property<string>("email");

                    b.Property<string>("hotline");

                    b.Property<string>("password");

                    b.Property<DateTime>("update_at");

                    b.HasKey("bbId");

                    b.HasIndex("bbName")
                        .IsUnique()
                        .HasFilter("[bbName] IS NOT NULL");

                    b.HasIndex("districtId");

                    b.ToTable("BloodBank");
                });

            modelBuilder.Entity("Services.Models.BloodStock", b =>
                {
                    b.Property<int>("bloodstockId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("bbId");

                    b.Property<int>("bloodId");

                    b.Property<DateTime>("create_at");

                    b.Property<float>("quantity");

                    b.Property<DateTime>("update_at");

                    b.HasKey("bloodstockId");

                    b.HasIndex("bbId");

                    b.HasIndex("bloodId");

                    b.ToTable("BloodStock");
                });

            modelBuilder.Entity("Services.Models.City", b =>
                {
                    b.Property<int>("cityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cityName");

                    b.Property<DateTime>("create_at");

                    b.Property<DateTime>("update_at");

                    b.HasKey("cityId");

                    b.HasIndex("cityName")
                        .IsUnique()
                        .HasFilter("[cityName] IS NOT NULL");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Services.Models.District", b =>
                {
                    b.Property<int>("districtId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cityId");

                    b.Property<DateTime>("create_at");

                    b.Property<string>("districtName");

                    b.Property<DateTime>("update_at");

                    b.HasKey("districtId");

                    b.HasIndex("cityId");

                    b.HasIndex("districtName")
                        .IsUnique()
                        .HasFilter("[districtName] IS NOT NULL");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Services.Models.DonationRequest", b =>
                {
                    b.Property<int>("drId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("amount");

                    b.Property<int?>("bbId");

                    b.Property<DateTime>("create_at");

                    b.Property<int?>("donorId");

                    b.Property<DateTime>("expected_date");

                    b.Property<string>("note");

                    b.Property<int>("status");

                    b.Property<DateTime>("update_at");

                    b.HasKey("drId");

                    b.HasIndex("bbId");

                    b.HasIndex("donorId");

                    b.ToTable("DonationRequest");
                });

            modelBuilder.Entity("Services.Models.Donor", b =>
                {
                    b.Property<int>("donorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address");

                    b.Property<int>("age");

                    b.Property<DateTime>("birthday");

                    b.Property<int>("bloodId");

                    b.Property<DateTime>("create_at");

                    b.Property<int>("districtId");

                    b.Property<string>("donorName");

                    b.Property<string>("email");

                    b.Property<bool>("gender");

                    b.Property<string>("password");

                    b.Property<string>("phone");

                    b.Property<bool>("status");

                    b.Property<DateTime>("update_at");

                    b.Property<float>("weight");

                    b.HasKey("donorId");

                    b.HasIndex("bloodId");

                    b.HasIndex("districtId");

                    b.HasIndex("email")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("Donor");
                });

            modelBuilder.Entity("Services.Models.Message", b =>
                {
                    b.Property<int>("mId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email");

                    b.Property<string>("fullname");

                    b.Property<string>("message");

                    b.Property<bool>("status");

                    b.HasKey("mId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Services.Models.MobiLinkRequest", b =>
                {
                    b.Property<int>("mlrId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address");

                    b.Property<int>("bloodId");

                    b.Property<DateTime>("create_at");

                    b.Property<string>("email");

                    b.Property<DateTime>("expected_date");

                    b.Property<string>("fullname");

                    b.Property<string>("hospitaltreatment");

                    b.Property<string>("note");

                    b.Property<string>("phone");

                    b.Property<int>("status");

                    b.Property<DateTime>("update_at");

                    b.HasKey("mlrId");

                    b.HasIndex("bloodId");

                    b.ToTable("MobiLinkRequest");
                });

            modelBuilder.Entity("Services.Models.RequestToBloodBank", b =>
                {
                    b.Property<int>("rtbkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address");

                    b.Property<float>("amount");

                    b.Property<int>("bbId");

                    b.Property<DateTime>("birthday");

                    b.Property<int>("bloodId");

                    b.Property<DateTime>("create_at");

                    b.Property<string>("email");

                    b.Property<DateTime>("expected_date");

                    b.Property<string>("fullname");

                    b.Property<bool>("gender");

                    b.Property<string>("hospitaltreatment");

                    b.Property<string>("note");

                    b.Property<string>("phone");

                    b.Property<int>("status");

                    b.Property<DateTime>("update_at");

                    b.HasKey("rtbkId");

                    b.HasIndex("bbId");

                    b.HasIndex("bloodId");

                    b.ToTable("RequestToBloodBank");
                });

            modelBuilder.Entity("Services.Models.RequestToDonor", b =>
                {
                    b.Property<int>("rtdId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address");

                    b.Property<float>("amount");

                    b.Property<DateTime>("birthday");

                    b.Property<DateTime>("create_at");

                    b.Property<int>("donorId");

                    b.Property<string>("email");

                    b.Property<DateTime>("expected_date");

                    b.Property<string>("fullname");

                    b.Property<bool>("gender");

                    b.Property<string>("hospitaltreatment");

                    b.Property<string>("note");

                    b.Property<string>("phone");

                    b.Property<int>("status");

                    b.Property<DateTime>("update_at");

                    b.HasKey("rtdId");

                    b.HasIndex("donorId");

                    b.ToTable("RequestToDonor");
                });

            modelBuilder.Entity("Services.Models.BloodBank", b =>
                {
                    b.HasOne("Services.Models.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Services.Models.BloodStock", b =>
                {
                    b.HasOne("Services.Models.BloodBank", "bloodBank")
                        .WithMany()
                        .HasForeignKey("bbId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Services.Models.Blood", "blood")
                        .WithMany("bloodStocks")
                        .HasForeignKey("bloodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Services.Models.District", b =>
                {
                    b.HasOne("Services.Models.City", "city")
                        .WithMany()
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Services.Models.DonationRequest", b =>
                {
                    b.HasOne("Services.Models.BloodBank", "bloodBank")
                        .WithMany()
                        .HasForeignKey("bbId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Services.Models.Donor", "donor")
                        .WithMany()
                        .HasForeignKey("donorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Services.Models.Donor", b =>
                {
                    b.HasOne("Services.Models.Blood", "blood")
                        .WithMany("donors")
                        .HasForeignKey("bloodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Services.Models.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Services.Models.MobiLinkRequest", b =>
                {
                    b.HasOne("Services.Models.Blood", "blood")
                        .WithMany("mobiLinkRequests")
                        .HasForeignKey("bloodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Services.Models.RequestToBloodBank", b =>
                {
                    b.HasOne("Services.Models.BloodBank", "bloodBank")
                        .WithMany()
                        .HasForeignKey("bbId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Services.Models.Blood", "blood")
                        .WithMany("requestToBloodBanks")
                        .HasForeignKey("bloodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Services.Models.RequestToDonor", b =>
                {
                    b.HasOne("Services.Models.Donor", "donor")
                        .WithMany()
                        .HasForeignKey("donorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
